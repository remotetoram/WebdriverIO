const cucumberJson = require('wdio-cucumberjs-json-reporter').default;
const fs = require("fs")
const getTimeStamp = require('./util/commonUtilities');
//const action = require('./test/support/user.command');
//import { action } from './test/support/user.command'
const HtmlReporter = require('multiple-cucumber-html-reporter');
const { removeSync } = require('fs-extra');
require('dotenv').config()
const oracledb = require("oracledb");
const path = require('path');
const testEnvironmentURL = process.env.TEST_URL || 'undefined';
const ORACLEDB_USER = process.env.ORACLEDB_USER || 'undefined';
const ORACLEDB_PASSWORD = process.env.ORACLEDB_PASSWORD || 'undefined';
const ORACLEDB_CONNECTSTRING = process.env.ORACLEDB_CONNECTSTRING || 'undefined';
const APPLICATION_USERNAME = process.env.APPLICATION_USERNAME || 'undefined';
const APPLICATION_PASSWORD = process.env.APPLICATION_PASSWORD || 'undefined';
const PATH_ORACLE_INSTANTCLIENT = process.env.PATH_ORACLE_INSTANTCLIENT || 'undefined';
var DatabaseName = ORACLEDB_CONNECTSTRING;
DatabaseName = DatabaseName.split('/').pop().split('.')[0];
exports.config = {
    beforeSession: function () {
        global.testEnvironmentURL = testEnvironmentURL;
        global.PATH_ORACLE_INSTANTCLIENT = PATH_ORACLE_INSTANTCLIENT;
        global.ORACLEDB_USER = ORACLEDB_USER;
        global.ORACLEDB_PASSWORD = ORACLEDB_PASSWORD;
        global.ORACLEDB_CONNECTSTRING = ORACLEDB_CONNECTSTRING;
        global.APPLICATION_USERNAME = APPLICATION_USERNAME;
        global.APPLICATION_PASSWORD = APPLICATION_PASSWORD;
        try {
            oracledb.initOracleClient({ libDir: PATH_ORACLE_INSTANTCLIENT });
        } catch (err) {
            console.error('could not initialize oracle instant client,please set PATH_ORACLE_INSTANTCLIENT environment variable');
            console.error(err);
            process.exit(1);
        }

    },

    // ====================
    // Runner Configuration
    // ====================
    //
    // WebdriverIO allows it to run your tests in arbitrary locations (e.g. locally or
    // on a remote machine).
    runner: 'local',
    //
    // ==================
    // Specify Test Files
    // ==================
    // Define which test specs should run. The pattern is relative to the directory
    // from which `wdio` was called. Notice that, if you are calling `wdio` from an
    // NPM script (see https://docs.npmjs.com/cli/run-script) then the current working
    // directory is where your package.json resides, so `wdio` will be called from there.
    //
    specs: [
        './test/features/**/*.feature',
    ],
    // Patterns to exclude.
    exclude: [
        // './test/features/**/searchInvoice.feature',
        //'./test/features/**/purchaseOrder.feature'
    ],
    //
    // ============
    // Capabilities
    // ============
    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same
    // time. Depending on the number of capabilities, WebdriverIO launches several test
    // sessions. Within your capabilities you can overwrite the spec and exclude options in
    // order to group specific specs to a specific capability.
    //
    // First, you can define how many instances should be started at the same time. Let's
    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have
    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec
    // files and you set maxInstances to 10, all spec files will get tested at the same time
    // and 30 processes will get spawned. The property handles how many capabilities
    // from the same test should run tests.
    //
    maxInstances: 1,
    //
    // If you have trouble getting all important capabilities together, check out the
    // Sauce Labs platform configurator - a great tool to configure your capabilities:
    // https://docs.saucelabs.com/reference/platforms-configurator
    //
    capabilities: [{

        // maxInstances can get overwritten per capability. So if you have an in-house Selenium
        // grid with only 5 firefox instances available you can make sure that not more than
        // 5 instances get started at a time.
        maxInstances: 1,
        //
        browserName: 'chrome',
        'goog:chromeOptions': {
            //args : ['--user-data-dir=C:\\Users\\rtripathi\\AppData\\Local\\Google\\Chrome\\User Data\\Default']
            args: ['--enable-automation', '--window-size=1920,1080', '--excludeSwitches', '--enable-logging'],
            
            // to run chrome headless the following flags are required
            // (see https://developers.google.com/web/updates/2017/04/headless-chrome)
         //args: ['--start-maximized','--headless', '--disable-gpu']
        },
        //Reporter Meta Data
        'cjson:metadata': {
            browser: {
                name: 'chrome',
                version: '86',
            },

            device: 'Virtual Machine',
            platform: {
                name: 'Windows',
                version: 'Windows 10'
            }
        },
        // If outputDir is provided WebdriverIO can capture driver session logs
        // it is possible to configure which logTypes to include/exclude.
        // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs
        // excludeDriverLogs: ['bugreport', 'server'],
    }],
    //
    // ===================
    // Test Configurations
    // ===================
    // Define all options that are relevant for the WebdriverIO instance here
    //
    // Level of logging verbosity: trace | debug | info | warn | error | silent
    logLevel: 'error',
    outputDir: path.join(__dirname, '/logs'),
    //
    // Set specific log levels per logger
    // loggers:
    // - webdriver, webdriverio
    // - @wdio/applitools-service, @wdio/browserstack-service,
    //   @wdio/devtools-service, @wdio/sauce-service
    // - @wdio/mocha-framework, @wdio/jasmine-framework
    // - @wdio/local-runner, @wdio/lambda-runner
    // - @wdio/sumologic-reporter
    // - @wdio/cli, @wdio/config, @wdio/sync, @wdio/utils
    // Level of logging verbosity: trace | debug | info | warn | error | silent
    // logLevels: {
    //     webdriver: 'info',
    //     '@wdio/applitools-service': 'info'
    // },
    //
    // If you only want to run your tests until a specific amount of tests have failed use
    // bail (default is 0 - don't bail, run all tests).
    bail: 0,
    //
    // Set a base URL in order to shorten url command calls. If your `url` parameter starts
    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.
    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url
    // gets prepended directly.
    // baseUrl: 'http://localhost:8080',
    //
    // Default timeout for all waitFor* commands.
    waitforTimeout: 10000,
    //
    // Default timeout in milliseconds for request
    // if browser driver or grid doesn't send response
    connectionRetryTimeout: 90000,
    //
    // Default request retries count
    connectionRetryCount: 3,
    //
    // Test runner services
    // Services take over a specific job you don't want to take care of. They enhance
    // your test setup with almost no effort. Unlike plugins, they don't add new
    // commands. Instead, they hook themselves up into the test process.
    services: [

        ['chromedriver', {
            logFileName: 'wdio-chromedriver.log', // default
            outputDir: 'driver-logs', // overwrites the config.outputDir
           // args: ['--silent'],
           //args: ['--headless', '--disable-gpu']
        }]
    ],
    //
    // Framework you want to run your specs with.
    // The following are supported: Mocha, Jasmine, and Cucumber
    // see also: https://webdriver.io/docs/frameworks.html
    //
    // Make sure you have the wdio adapter package for the specific framework installed
    // uncomment below lines for wdio logs before running any tests.
    //logLevel: 'error',
    //outputDir: './Report',
    // reporters: [['allure', {
    //     outputDir: './allure-results',
    //     disableWebdriverStepsReporting: false,
    //     disableWebdriverScreenshotsReporting: false,
    //     useCucumberStepReporter: true,
    // }]],
    reporters: [
        'cucumberjs-json',

        // OR like this if you want to set the folder and the language
        ['cucumberjs-json', {

            // jsonFolder: './'+global.testReportFolder+'/output/json',
            jsonFolder: './test-report/CARMA_AutomationReportOutput/json',
            language: 'en',
        },
        ],

    ],
    framework: 'cucumber',
    //
    // The number of times to retry the entire specfile when it fails as a whole
    // specFileRetries: 1,
    //
    // Whether or not retried specfiles should be retried immediately or deferred
    // to the end of the queue specFileRetriesDeferred: false,
    //
    // Test reporter for stdout.
    // The only one supported by default is 'dot'
    // see also: https://webdriver.io/docs/dot-reporter.html
    //  reporters: ['spec'],
    //
    // If you are using Cucumber you need to specify the location of your step definitions.

    cucumberOpts: {
        scenarioLevelReporter: false,
        // <boolean> show full backtrace for errors
        backtrace: false,
        // <string[]> module used for processing required features
        requireModule: ['@babel/register'],
        // <boolean< Treat ambiguous definitions as errors
        failAmbiguousDefinitions: true,
        // <boolean> invoke formatters without executing steps
        // dryRun: false,
        // <boolean> abort the run on first failure
        failFast: false,
        // <boolean> Enable this config to treat undefined definitions as
        // warnings
        ignoreUndefinedDefinitions: false,
        // <string[]> ("extension:module") require files with the given
        // EXTENSION after requiring MODULE (repeatable)
        name: [],
        // <boolean> hide step definition snippets for pending steps
        snippets: true,
        // <boolean> hide source uris
        source: true,
        // <string[]> (name) specify the profile to use
        profile: [],
        // <string[]> (file/dir) require files before executing features
        require: [
            './test/steps/*.js',
            // './test/pages/*.js'
            // Or search a (sub)folder for JS files with a wildcard
            // works since version 1.1 of the wdio-cucumber-framework
            // './src/**/*.js',
        ],
        // <string> specify a custom snippet syntax
        snippetSyntax: undefined,
        // <boolean> fail if there are any undefined or pending steps
        strict: true,
        // <string> (expression) only execute the features or scenarios with
        // tags matching the expression, see
        // https://docs.cucumber.io/tag-expressions/
        tagExpression: 'not @Pending',
        // <boolean> add cucumber tags to feature or scenario name
        tagsInTitle: false,
        // <number> timeout for step definitions
        timeout: 240000,
    },
    onPrepare: () => {
        // Remove the `.tmp/` folder that holds the json and report files
        removeSync('./test-report/CARMA_AutomationReportOutput');
    },

    onComplete: () => {
        // Generate the report when it all tests are done
        HtmlReporter.generate({
            // Required
            // This part needs to be the same path where you store the JSON files
            // default = '.tmp/json/'
            pageTitle: 'CARMA UI Test Automation Report',
            reportName: 'CARMA UI Test Automation Report',
            displayDuration: true,
          //  disableLog: true,
            pageFooter: '<div><p></p></div>',
            customData: {
                title: 'Run info',
                data: [
                    { label: 'TestURL', value: process.env.TEST_URL },
                    { label: 'DataBase', value: DatabaseName }
                ]
            },
            jsonDir: './test-report/CARMA_AutomationReportOutput/json',
            reportPath: './test-report/CARMA_AutomationReportOutput/report/'
         
            // for more options see https://github.com/wswebcreation/multiple-cucumber-html-reporter#options
        });

        const currPath = "./test-report/CARMA_AutomationReportOutput"

        const newPath = "./test-report/CARMA_AutomationReportOutput_"+getTimeStamp.getTimeStamp()

        try {
            fs.renameSync(currPath, newPath)
            console.log("C:\Carma UI Automation\test-report\CARMA_AutomationReportOutput_10-12-2020-18-56\report\index.html")
            console.log("Successfully updated test report output folder with latest timestamp.")
        } catch (err) {
            console.log(err)
        }
    },
    afterScenario: function (uri, feature, scenario, result, sourceLocation) {
        console.log('Test Scenario completed=>' + scenario.name)
        console.log('Scenario status  =>' + result.status)
        if (result.status == 'failed' || result.status == 'undefined') {
            console.log('Taking screenshot at failure')
            cucumberJson.attach(browser.takeScreenshot(), 'image/png');
           browser.reloadSession()
        }
       // browser.closeWindow()
        //browser.reloadSession()
    },
    beforeScenario: function (uri, feature, scenario, result, sourceLocation) {
        console.log('Test Scenario Starting  =>' + scenario.name)
    },


};